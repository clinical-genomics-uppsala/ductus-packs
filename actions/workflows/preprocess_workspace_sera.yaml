version: "1.0" # Orquest version

description: Will rsync new sequence data to compute for sera processing

input:
  - runfolder
  - runfolder_name
  - samplesheet_file
  - fastq_files_path
  - machine_type
  - preprocessing_storage_path
  - transfer_to_host
  - transfer_to_location
  - transfer_to_key
  - transfer_to_user
  - runfolder_host
  - runfolder_host_port
  - runfolder_api_version
  - mail_lab
  - mail_bioinfo

vars:
  - sample_index_file: null
  - experiment_name: null
  - inbox_folder: null
  - project_types: null

tasks:
  get_sample_index_file_name:
    action: core.local
    input:
      cmd: ls *_index.csv | grep -E '^[0-9]+'
      cwd: <% ctx(runfolder) %>
    next:
      - when: <% succeeded() %>
        publish: sample_index_file=<% result().stdout %>
        do:
          - get_experiment_name
      - when: <% failed() %>
        publish: failed_step="get_sample_index_file_name  -- Couldn't locate a csv file in folder <% ctx(experiment_name) %>, <% result().stdout %>, <% result().stderr %>"
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  get_experiment_name:
    action: core.local
    input:
      cmd: python3 -c 'import sys;import re; p = re.compile("^(\d{4}\d{4}_[a-zA-Z]{2})");sys.stdout.write(p.search("<% ctx(sample_index_file) %>").group(1))'
    next:
      - when: <% succeeded() %>
        publish: experiment_name=<% result().stdout %>
        do:
          - get_run_year
      - when: <% failed() %>
        publish: failed_step='get_experiment_name  -- Couldn't get experiment name, <% result().stdout %>, <% result().stderr %>'
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  get_run_year:
    action: core.local
    input:
      cmd: python3 -c 'import sys;import re; p = re.compile("^(\d{4})\d{4}_[a-zA-Z]{2}");sys.stdout.write(p.search("<% ctx(sample_index_file) %>").group(1))'
    next:
      - when: <% succeeded() %>
        publish: run_year=<% result().stdout %>
        do:
          - get_project_types
      - when: <% failed() %>
        publish: failed_step='get_run_year  -- Couldn't extract run year from \"<% ctx(experiment_name) %>\", <% result().stdout %>, <% result().stderr %>'
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  get_project_types:
    action: core.local
    input:
      cwd: <% ctx(runfolder) %>
      cmd: python3 -c 'from ductus.tools.utils import print_project_types; print_project_types("wp1", "sera", "<% ctx(samplesheet_file) %>")'
    next:
      - when: <% succeeded() %>
        publish: project_types=<% result().stdout %>
        do:
          - create_raw_folder_on_compute
      - when: <% failed() %>
        publish: failed_step='get_project_types  -- Couldn't extract project types \"<% ctx(experiment_name) %>\", <% result().stdout %>, <% result().stderr %>'
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  create_raw_folder_on_compute:
    action: core.remote
    input:
      username: <% ctx(transfer_to_user) %>
      private_key: <% ctx(transfer_to_key) %>
      cwd: <% ctx(transfer_to_location) %>/ngs/
      cmd: for type in <% ctx(project_types) %>; do mkdir -p $type/INBOX/<% ctx(experiment_name) %>/raw; done
      timeout: 10
      hosts: <% ctx(transfer_to_host) %>
    next:
      - when: <% succeeded() %>"
        do:
         - transfer_runinfo_files
         - transfer_interop_files
         - transfer_sample_index_file
         - transfer_samplesheet_file
         - transfer_fastq_files
      - when: <% failed() %>
        publish: failed_step="create_raw_folder_on_compute  -- Couldn't create raw folder on <% ctx(transfer_to_host) %>, <% result().stdout %>, <% result().stderr %>"
        do:
         - bioinfo_error_notifier
         - molpat_error_notifier
         - mark_as_failed

  transfer_runinfo_files:
    action: core.local
    input:
      cwd: /opt/src/ductus-core/ductus/scripts
      cmd: for project_type in <% ctx(project_types) %>; do python3 rsync.py -c -f '<% ctx(runfolder) %>/Run*' -t <% ctx(transfer_to_location) %>/ngs/${project_type}/INBOX/<% ctx(experiment_name) %>/raw -u <% ctx(transfer_to_user) %> -i <% ctx(transfer_to_key) %> -r <% ctx(transfer_to_host) %> -p 2; done
      timeout: 300
    next:
      - when: <% succeeded() %>
        do:
          - create_transfer_complete_file
      - when: <% failed() %>
        publish: failed_step="transfer_runinfo_files  -- Couldn't transfer runinfo to <% ctx(transfer_to_host) %>, <% result().stdout %>, <% result().stderr %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  transfer_interop_files:
    action: core.local
    input:
      cwd: /opt/src/ductus-core/ductus/scripts
      cmd: for project_type in <% ctx(project_types) %>; do python3 rsync.py -c -f <% ctx(runfolder) %>/InterOp -t <% ctx(transfer_to_location) %>/ngs/${project_type}/INBOX/<% ctx(experiment_name) %>/raw -u <% ctx(transfer_to_user) %> -i <% ctx(transfer_to_key) %> -r <% ctx(transfer_to_host) %> -p 2; done
      timeout: 60
    next:
      - when: <% succeeded() %>
        do:
          - create_transfer_complete_file
      - when: <% failed() %>
        publish: failed_step="transfer_interop_files  -- Couldn't transfer interop_files to <% ctx(transfer_to_host) %>, <% result().stdout %>, <% result().stderr %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  transfer_sample_index_file:
    action: core.local
    input:
      cwd: /opt/src/ductus-core/ductus/scripts
      cmd: for project_type in <% ctx(project_types) %>; do python3 rsync.py -c -f <% ctx(runfolder) %>/<% ctx(sample_index_file) %> -t <% ctx(transfer_to_location) %>/ngs/${project_type}/INBOX/<% ctx(experiment_name) %>/ -u <% ctx(transfer_to_user) %> -i <% ctx(transfer_to_key) %> -r <% ctx(transfer_to_host) %> -p 2; done
      timeout: 300
    next:
      - when: <% succeeded() %>
        do:
          - create_transfer_complete_file
      - when: <% failed() %>
        publish: failed_step="transfer_csv_file -- Couldn't transfer csv to <% ctx(transfer_to_host) %>, <% result().stdout %>, <% result().stderr %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  transfer_samplesheet_file:
    action: core.local
    input:
      cwd: /opt/src/ductus-core/ductus/scripts
      cmd: for project_type in <% ctx(project_types) %>; do python3 rsync.py -c -f <% ctx(runfolder) %>/<% ctx(samplesheet_file) %> -t <% ctx(transfer_to_location) %>/ngs/${project_type}/INBOX/<% ctx(experiment_name) %>/ -u <% ctx(transfer_to_user) %> -i <% ctx(transfer_to_key) %> -r <% ctx(transfer_to_host) %> -p 2; done
      timeout: 300
    next:
      - when: <% succeeded() %>
        do:
          - create_transfer_complete_file
      - when: <% failed() %>
        publish: failed_step="transfer_csv_file -- Couldn't transfer csv to <% ctx(transfer_to_host) %>, <% result().stdout %>, <% result().stderr %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  transfer_fastq_files:
    action: core.local
    input:
      cwd: /opt/src/ductus-core
      cmd: >
          python3 -c 'from ductus.tools.wrappers import Rsync;
          from ductus.tools.utils import get_samples_and_project;
          [Rsync(from_path="<% ctx(fastq_files_path) %>/" + sample + "*fastq.gz",
          to_path="<% ctx(transfer_to_location) %>/ngs/" + project_type + "/INBOX/<% ctx(experiment_name) %>/raw",
          remote_address="<% ctx(transfer_to_host) %>",
          user="<% ctx(transfer_to_user) %>",
          from_is_remote=2,
          repeat=20,
          identity_file="<% ctx(transfer_to_key) %>",
          checksum_validate=True,
          preserve_permissions=False,
          local_sync=False).execute()
           for sample, project_type in get_samples_and_project("wp1","sera", "<% ctx(runfolder) %>/<% ctx(samplesheet_file) %>")]'
      timeout: 86400
    next:
      - when: <% succeeded() %>
        do:
          - create_transfer_complete_file
      - when: <% failed() %>
        publish: failed_step="transfer_fastq_files -- Couldn't transfer fastq files to <% ctx(transfer_to_host) %>, <% result().stdout %>, <% result().stderr %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  create_transfer_complete_file:
    action: core.remote
    join: all
    input:
      username: <% ctx(transfer_to_user) %>
      private_key: <% ctx(transfer_to_key) %>
      cwd: <% ctx(transfer_to_location) %>/ngs/
      cmd: for project_type in <% ctx(project_types) %>; do echo "`date`" > ${project_type}/INBOX/<% ctx(experiment_name) %>/Done.txt; done
      timeout: 10
      hosts: <% ctx(transfer_to_host) %>
    next:
      - when: <% succeeded() %>
        do:
          #- mark_as_finished
          - old_create_inbox_folder
      - when: <% failed() %>
        publish: failed_step="create_transfer_complete_file -- Couldn't couldn't create Done.txt file on <% ctx(transfer_to_host) %>, <% result().stdout %>, <% result().stderr %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

#######################################################
# Can be removed when archive steps have been updated, only works for klinik
#######################################################
  old_create_inbox_folder:
    action: core.local
    input:
      cwd: <% ctx(preprocessing_storage_path) %>/klinik/INBOX
      cmd: mkdir -p <% ctx(experiment_name) %>
    next:
      - when: <% succeeded() %>
        publish: inbox_folder="<% ctx(preprocessing_storage_path) %>/klinik/INBOX/<% ctx(experiment_name) %>/"
        do:
          - old_transfer_runfolder
      - when: <% failed() %>
        publish: failed_step="create_inbox_folder -- Couldn't create experiment folder:<% ctx(preprocessing_storage_path) %>/klinik/INBOX/<% ctx(experiment_name) %>/!"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier

  old_transfer_runfolder:
    action: core.local
    input:
      cwd: /opt/src/ductus-core/ductus/scripts
      cmd: python3 rsync.py -c -f <% ctx(runfolder) %> -t <% ctx(inbox_folder) %>/ -l
      timeout: 36000
    next:
      - when: <% succeeded() %>
        do:
          - old_transfer_csv_file
      - when: <% failed() %>
        publish: failed_step="transfer_runfolder -- Couldn't transfer runfolder to inbox - <% ctx(preprocessing_storage_path) %>/ngs/klinik/INBOX/<% ctx(experiment_name) %>/!"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier

  old_transfer_csv_file:
    action: core.local
    input:
      cwd: /opt/src/ductus-core/ductus/scripts
      cmd: python3 rsync.py -c -f <% ctx(runfolder) %>/<% ctx(sample_index_file) %> -t <% ctx(inbox_folder) %>/ -l
      timeout: 3600
    next:
      - when: <% succeeded() %>
        do:
          - mark_as_finished

##################################################################3

  molpat_error_notifier:
    action: core.sendmail
    input:
      to: <% ctx(mail_bioinfo) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][WP1][ERROR] - Move failure, <% ctx(experiment_name) %>"
      body: "Something went wrong during the move of data from workspace to inbox, <% ctx(runfolder) %>, <% ctx(experiment_name) %>. A Bioinformatician has been notified."
    next:
      - when: <% succeeded() %>
        do:
          - fail

  bioinfo_error_notifier:
    action: core.sendmail
    input:
      to: <% ctx(mail_bioinfo) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][WP1][ERROR] - Pre-processing, <% ctx(experiment_name) %>"
      body: Something went wrong during the pre-processing of <% ctx(experiment_name) %>, please investigate!!!\n Failure message -- <% failed_step  %>
    next:
      - when: <% succeeded() %>
        do:
          - fail

  mark_as_finished:
    action: core.http
    input:
      url: http://<% ctx(runfolder_host) %>:<% ctx(runfolder_host_port) %>/api/<% ctx(api_version) %>/runfolders/path<% ctx(runfolder) %>
      body: '{"state": "done"}'
      method: "POST"

  mark_as_failed:
    action: core.http
    input:
      url:  http://<% ctx(runfolder_host) %>:<% ctx(runfolder_host_port) %>/api/<% ctx(api_version) %>/runfolders/path<% ctx(runfolder) %>
      body: '{"state": "error"}'
      method: "POST"
    next:
      - when: <% succeeded() %>
        do:
          - fail
