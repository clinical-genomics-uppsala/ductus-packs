version: "1.0" # Orquest version

description: Will rsync new sequence data to compute for GMS560 processing

input:
  - runfolder_path
  - runfolder_name
  - samplesheet_file
  - storage_path
  - transfer_to_host
  - transfer_to_location
  - transfer_to_key
  - transfer_to_user
  - runfolder_host
  - runfolder_host_port
  - runfolder_api_version
  - demultiplexing_host
  - demultiplexing_port
  - demultiplexing_output_folder
  - mail_lab
  - mail_bioinfo

vars:
  - archive_fastq_folder: null
  - archive_runfolder: null
  - sample_index_file: null
  - experiment_name: null
  - fastq_files_path: null
  - project_types: null
  - project_and_experiments: null
  - run_year: null
  - demultiplexing_id: null
  - failed_step: null
  - stderr: null

tasks:
  get_run_year:
    action: core.local
    input:
      cmd: python3 -c 'import sys;import re; from datetime import datetime; p = re.compile("^(\d{6})_[a-zA-Z]{2}");sys.stdout.write(str(datetime.strptime(p.search("<% ctx(runfolder_name) %>").group(1),"%y%m%d").year))'
    next:
      - when: <% succeeded() %>
        publish: run_year=<% result().stdout %>
        do:
          - get_project_types
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "get_run_year  -- Could not extract run year from \"<% ctx(runfolder_name) %>\""
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  get_project_types:
    action: core.local
    input:
      cwd: <% ctx(runfolder_path) %>/<% ctx(runfolder_name) %>
      cmd: python3 -c 'from ductus.tools.utils import get_project_types; import json; print(json.dumps(list(get_project_types("wp1", "gms560", "<% ctx(samplesheet_file) %>"))))'
    next:
      - when: <% succeeded() %>
        publish: get_project_and_experiment=<% result().stdout %>
        do:
          - get_project_and_experiment
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "get_project_types  -- Could not extract project types \"<% ctx(runfolder_name) %>\""
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  get_project_and_experiment:
    action: core.local
    input:
      cwd: <% ctx(runfolder_path) %>/<% ctx(runfolder_name) %>
      cmd: python3 -c 'from ductus.tools.utils import get_project_and_experiment; import json; print(json.dumps(list(get_project_and_experiment("wp1", "gms560", "<% ctx(samplesheet_file) %>"))))'
    next:
      - when: <% succeeded() %>
        publish: project_and_experiments=<% result().stdout %>
        do:
          - demultiplex
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "get_project_and_experiment  -- Could not extract project and experiments \"<% ctx(runfolder_name) %>\""
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  demultiplex:
    action: core.local
    input:
      cmd: >
        curl -X POST --data '{"additional_args":""}' http://<% ctx(demultiplexing_host) %>:<% ctx(demultiplexing_port) %>/api/1.0/start/<% ctx(runfolder_name) %> | python3 -c 'import sys; import json; result=json.loads(sys.stdin.read()); print(result["job_id"]) if result["state"] in ["pending","started","done"] else exit(1)'
    next:
      - when: <% succeeded() %>
        publish: demultiplexing_id=<% result().stdout %>
        do:
          - wait_for_demultiplexing_to_be_done
      - when: <% failed() %>
        publish:
          - stderr: "Demultplexing failed"
          - failed_step: "demultiplex -- failed demultiplexing on  <% ctx(runfolder_name) %>"
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  wait_for_demultiplexing_to_be_done:
      action: core.local
      input:
        cmd: >
          curl http://<% ctx(demultiplexing_host) %>:<% ctx(demultiplexing_port) %>/api/1.0/status/<% ctx(demultiplexing_id) %> | python3 -c 'import sys; import json; result=json.loads(sys.stdin.read()); exit(0) if result["state"] == "done" else exit(1)'
      retry:
        count: 10
        delay: 1
      next:
        - when: <% succeeded() %>
          publish:
            - fastq_files_path: "<% ctx(demultiplexing_output_folder) %>/<% ctx(runfolder_name) %>"
          do:
            create_fastq_folder_on_compute
        - when: <% failed() %>
          publish:
            - stderr: "Demultplexing failed"
            - failed_step: "demultiplex -- failed demultiplexing on  <% ctx(runfolder_name) %>"
          do:
            - bioinfo_error_notifier
            - mark_as_failed

  create_fastq_folder_on_compute:
    with:
      items: <% ctx(project_and_experiments) %>
    action: core.remote
    input:
      username: <% ctx(transfer_to_user) %>
      private_key: <% ctx(transfer_to_key) %>
      cwd: <% ctx(transfer_to_location) %>/ngs/
      cmd: mkdir -p <% item()[0] %>/INBOX/<% item()[1] %>/fastq
      timeout: 10
      hosts: <% ctx(transfer_to_host) %>
    next:
      - when: <% succeeded() %>
        do:
         - transfer_samplesheet_file
         - transfer_fastq_files
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "create_raw_folder_on_compute  -- Could not create raw folder on <% ctx(transfer_to_host) %>"
        do:
         - bioinfo_error_notifier
         - molpat_error_notifier
         - mark_as_failed

  transfer_samplesheet_file:
    with:
      items: <% ctx(project_and_experiments) %>
    action: core.local
    input:
      cwd: /opt/src/ductus-core/ductus/scripts
      cmd: python3 rsync.py -c -f <% ctx(runfolder_path) %>/<% ctx(runfolder_name) %>/<% ctx(samplesheet_file) %> -t <% ctx(transfer_to_location) %>/ngs/<% item()[0] %>/INBOX/<% item()[1] %>/ -u <% ctx(transfer_to_user) %> -i <% ctx(transfer_to_key) %> -r <% ctx(transfer_to_host) %> -p 2;
      timeout: 300
    next:
      - when: <% succeeded() %>
        do:
          - create_transfer_complete_file
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "transfer_csv_file -- Could not transfer csv to <% ctx(transfer_to_host) %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  transfer_fastq_files:
    with:
      items: <% ctx(project_and_experiments) %>
    action: core.local
    input:
      cwd: /opt/src/ductus-core
      cmd: >
          python3 -c 'from ductus.tools.wrappers import Rsync;
          from ductus.tools.utils import get_samples_and_project;
          [Rsync(from_path="<% ctx(fastq_files_path) %>/" + sample + "*fastq.gz",
          to_path="<% ctx(transfer_to_location) %>/ngs/" + project_type + "/INBOX/" + experiment + "/fastq/",
          remote_address="<% ctx(transfer_to_host) %>",
          user="<% ctx(transfer_to_user) %>",
          from_is_remote=2,
          repeat=20,
          identity_file="<% ctx(transfer_to_key) %>",
          checksum_validate=True,
          preserve_permissions=False,
          local_sync=False).execute()
           for sample, project_type, experiment, *info in get_samples_and_project("wp1","gms560", "<% ctx(runfolder_path) %>/<% ctx(runfolder_name) %>/<% ctx(samplesheet_file) %>")]'
      timeout: 86400
    next:
      - when: <% succeeded() %>
        do:
          - create_transfer_complete_file
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "transfer_fastq_files -- Could not transfer fastq files to <% ctx(transfer_to_host) %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  create_transfer_complete_file:
    with:
      items: <% ctx(project_and_experiments) %>
    action: core.remote
    join: all
    input:
      username: <% ctx(transfer_to_user) %>
      private_key: <% ctx(transfer_to_key) %>
      cwd: <% ctx(transfer_to_location) %>/ngs/
      cmd: echo "`date`" > <% item()[0] %>/INBOX/<% item()[1] %>/Done.txt;
      timeout: 10
      hosts: <% ctx(transfer_to_host) %>
    next:
      - when: <% succeeded() %>
        do:
          - mark_as_finished
          - prepare_transfer_of_fastq_to_archive
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "create_transfer_complete_file -- Could not create Done.txt file on <% ctx(transfer_to_host) %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  prepare_transfer_of_fastq_to_archive:
    with:
      items: <% ctx(project_and_experiments) %>
    action: core.local
    input:
      cmd: mkdir -p <% ctx(storage_path) %>/ngs/<% item()[0] %>/archive/gms560/fastq/<% ctx(run_year) %>/<% item()[1] %>
    next:
      - when: <% succeeded() %>
        do:
          - prepare_transfer_of_runfolder_to_archive
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "prepare_transfer_of_fastq_to_archive -- Couldn't create fastq runfolder in archive"
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  prepare_transfer_of_runfolder_to_archive:
    with:
      items: <% ctx(project_and_experiments) %>
    action: core.local
    input:
      cmd: mkdir -p <% ctx(storage_path) %>/ngs/<% item()[0] %>/archive/gms560/NGS_runfolder/<% ctx(run_year) %>/<% item()[1] %>
    next:
      - when: <% succeeded() %>
        do:
          - archive_runfolder_data
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "prepare_transfer_of_runfolder_to_archive -- failed to create runfolder archive folder"
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  archive_runfolder_data:
    with:
      items: <% ctx(project_and_experiments) %>
    action: ductus.archive_runfolder_and_fastq
    input:
      samplesheet_file: <% ctx(samplesheet_file) %>
      compress_runfolder_name: "gms560_<% ctx(runfolder_name) %>"
      runfolder_path: <% ctx(runfolder_path) %>
      runfolder_name: <% ctx(runfolder_name) %>
      project_type: "<% item()[0] %>"
      storage_path_runfolder: <% ctx(storage_path) %>/ngs/<% item()[0] %>/archive/gms560/NGS_runfolder/<% ctx(run_year) %>/<% item()[1] %>
      fastq_files_path: <% ctx(fastq_files_path) %>
      storage_path_fastq: "<% ctx(storage_path) %>/ngs/<% item()[0] %>/archive/gms560/fastq/<% ctx(run_year) %>/<% item()[1] %>"
      analysis: "gms560"
      wp: "wp1"
      mail_bioinfo: <% ctx(mail_bioinfo) %>
    next:
      - when: <% succeeded() %>
        do:
          - mark_as_finished
          - archive_done_notifier
      - when: <% failed() %>
        publish:
          - stderr: <% result().output.stderr %>
          - failed_step: "archive_runfolder_data -- Could not  archive runfolder <% ctx(runfolder_name) %>"
        do:
          - bioinfo_error_notifier
          - molpat_error_notifier
          - mark_as_failed

  archive_done_notifier:
    join: all
    action: core.sendmail
    input:
      to: <% ctx(mail_bioinfo) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][WP1][SUCCESS] - TSO500 Archiving, <% ctx(runfolder_name) %>"
      body: <% ctx(runfolder_name) %> has been archived!!!

  molpat_error_notifier:
    action: core.sendmail
    input:
      to: <% ctx(mail_bioinfo) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][WP1][ERROR] - Move failure, <% ctx(experiment_name) %>"
      body: "Something went wrong during the move of data from workspace to inbox, <% ctx(runfolder_path) %>/<% ctx(runfolder_name) %>, <% ctx(experiment_name) %>. A Bioinformatician has been notified."
    next:
      - when: <% succeeded() %>
        do:
          - fail

  bioinfo_error_notifier:
    action: core.sendmail
    input:
      to: <% ctx(mail_bioinfo) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][WP1][ERROR] - Pre-processing, <% ctx(experiment_name) %>"
      body: Something went wrong during the pre-processing of <% ctx(experiment_name) %>, please investigate!!!\n Failure message -- <% ctx(failed_step)  %>, <% ctx(stderr) %>
    next:
      - when: <% succeeded() %>
        do:
          - fail

  mark_as_finished:
    action: core.http
    input:
      url: http://<% ctx(runfolder_host) %>:<% ctx(runfolder_host_port) %>/api/<% ctx(runfolder_api_version) %>/runfolders/path<% ctx(runfolder_path) %>/<% ctx(runfolder_name) %>
      body: '{"state": "done"}'
      method: "POST"

  mark_as_failed:
    action: core.http
    input:
      url:  http://<% ctx(runfolder_host) %>:<% ctx(runfolder_host_port) %>/api/<% ctx(runfolder_api_version) %>/runfolders/path<% ctx(runfolder_path) %>/<% ctx(runfolder_name) %>
      body: '{"state": "error"}'
      method: "POST"
    next:
      - when: <% succeeded() %>
        do:
          - fail

output:
  - stderr: <% ctx(stderr) %>
