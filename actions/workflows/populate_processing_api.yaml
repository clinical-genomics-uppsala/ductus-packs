version: "1.0" # Orquest version

description: Will process a new sequence run

input:
  - runfolder
  - runfolder_host
  - runfolder_host_port
  - demultiplexing_host
  - demultiplexing_host_port
  - demultiplexing_output_folder
  - api_version
  - mail_bioinfo
  - processing_api_service_url
  - processing_api_upload_illumina_run_url
  - processing_api_list_samples_url
  - processing_api_update_fastq_info_url
  - analysis_csv_folder_path
  - converted_samplesheet_folder_path

vars:
  - samplesheet_file: null
  - runinfo_file: null
  - experiments: null
  - fastq_update_query: null
  - runfolder_path: null
  - runfolder_name: null
  - experiments_folder: null
  - failed_step: null
  - samples: null
  - stderr: null
  - machine_name: null

tasks:
  check_for_samplesheet:
    action: core.local
    input:
      cmd: ls <% ctx(runfolder) %>/SampleSheet.csv
    next:
      - when: <% succeeded() %>
        publish: samplesheet_file=<% result().stdout %>
        do:
          - check_for_runinfo
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "check_for_samplesheet  -- Couldn't locate a SampleSheet.csv file in folder <% ctx(runfolder) %>, <% result().stdout %>"
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  check_for_runinfo:
    action: core.local
    input:
      cmd: ls <% ctx(runfolder) %>/RunInfo.xml
    next:
      - when: <% succeeded() %>
        publish: runinfo_file=<% result().stdout %>
        do:
          - dos2unix
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "check_for_runinfo  -- Couldn't locate a RunInfo.xml file in folder <% ctx(runfolder) %>, <% result().stdout %>"
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  dos2unix:
    action: core.local
    input:
      cwd: <% ctx(runfolder) %>
      cmd: mv <% ctx(samplesheet_file)%> <% ctx(samplesheet_file)%>.copy && dos2unix -n <% ctx(samplesheet_file)%>.copy <% ctx(samplesheet_file)%>
    next:
      - when: <% succeeded %>
        do:
          - detect_old_samplesheet_format
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "dos2unix -- Could not run dos2unix on ctx(samplesheet_file)%>"
        do:
          - bioinfo_error_notifier
          - mark_as_failed

  detect_old_samplesheet_format:
    action: core.local
    input:
      cwd:  <% ctx(runfolder) %>
      cmd: python3 -c 'from ductus.tools.utils import is_old_ductus_format; exit(0) if is_old_ductus_format("<% ctx(samplesheet_file) %>") == 1 else exit(1)'
    next:
      - when: <% succeeded() %>
        do:
          - get_runfolder_name
      - when: <% failed() %>
        do:
          - upload_sequencerun

  get_runfolder_name:
    action: core.local
    input:
      cmd: basename <% ctx(runfolder) %>
    next:
      - when: <% succeeded() %>
        publish: runfolder_name=<% result().stdout %>
        do:
          - create_analysis_file
      - when: <% failed() %>
        publish:
          - stderr: <% result().stderr %>
          - failed_step: "get_runfolder_name  -- Couldn't get runfolder name, <% result().stdout %>"
        do:
          - bioinfo_error_notifier
          - mark_as_failed
  
  create_analysis_file:
    action: core.local
    input:
      cmd: python3 -c 'from ductus.tools.utils import create_analysis_file; create_analysis_file("<% ctx(samplesheet_file)%>", "<% ctx(analysis_csv_folder_path)%>")'
    next:
      - when: <% succeeded() %>
        do:
          - convert_old_samplesheet_to_new

  convert_old_samplesheet_to_new:
    action: core.local
    input:
      cmd: python3 -c 'from ductus.tools.utils import convert_old_cgu_samplesheet_format_to_new; convert_old_cgu_samplesheet_format_to_new("<% ctx(samplesheet_file)%>", "<% ctx(converted_samplesheet_folder_path)%>/<% ctx(runfolder_name)%>_samplesheeet.csv")'
    next:
      - when: <% succeeded() %>
        publish: samplesheet_file="<% ctx(converted_samplesheet_folder_path)%>/<% ctx(runfolder_name)%>_samplesheeet.csv"
        do:
          - upload_sequencerun

  upload_sequencerun:
    join: 1
    action: core.local
    input:
      cmd: sh -c 'status=$(curl -o /dev/null -s --write-out "%{http_code}" -X POST -F "samplesheet=@<% ctx(samplesheet_file) %>" -F "runinfo=@<% ctx(runinfo_file) %>" <% ctx(processing_api_service_url) %>/<% ctx(processing_api_upload_illumina_run_url) %>); echo $status; [ $status -eq "201" ]'
    next:
      - when: <% succeeded() %>
        do:
          - get_samples

  get_samples:
    action: core.local
    input:
       cmd: curl <% ctx(processing_api_service_url) %>/<% ctx(processing_api_list_samples_url) %>?sequencing_run__run_id=<% ctx(runfolder_name) %> | python3 -c 'import json; import sys; print(json.dumps([(sample["sample_id"], sample["experiment_id"]) for sample in json.load(sys.stdin)]))'
    next:
      - when: <% succeeded %>
        publish: samples=<% result().stdout %>
        do:
          - create_fastq_update_query

  create_fastq_update_query:
    join: 1
    action: core.local
    input:
      cwd: <% ctx(runfolder) %>
      cmd:  echo "<% ctx(samples) %>" | sed 's/\x27/"/g' | python3 -c 'from ductus.tools.utils import create_json_update_fastq, combine_files_with_samples; import sys, json, glob; print(json.dumps(create_json_update_fastq(combine_files_with_samples(json.loads(sys.stdin.read()), glob.glob("**/*.fastq.gz", recursive=True)))))'
    next:
      - when: <% succeeded %>
        publish: fastq_update_query=<% result().stdout %>
        do:
          - add_fastq_information
    
  add_fastq_information:
    action: core.local
    input:
      cmd: curl -F "update_json=<% ctx(fastq_update_query) %>" <% ctx(processing_api_service_url) %>/<% ctx(processing_api_update_fastq_info_url) %>
      
  bioinfo_error_notifier:
    action: core.sendmail
    input:
      to: <% ctx(mail_bioinfo) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][WP][ERROR] - Pre-processing, <% ctx(runfolder_name) %>"
      body: Something went wrong during the pre-processing of <% ctx(runfolder_name) %>, please investigate!!!\n Failure message -- <% ctx(failed_step) %>, <% ctx(stderr) %>
    next:
      - do:
          - fail

  mark_as_failed:
    action: core.http
    input:
      url:  http://<% ctx(runfolder_host) %>:<% ctx(runfolder_host_port) %>/api/<% ctx(api_version) %>/runfolders/path<% ctx(runfolder) %>
      body: '{"state": "error"}'
      method: "POST"
    next:
      - when: <% succeeded() %>
        do:
          - fail

output:
  - stderr: <% ctx(stderr) %>
