version: "1.0" # mistral version
description: Will rsync result back from compute

input:
  - runfolder
  - runfolder_host
  - runfolder_port
  - runfolder_api_version
  - transfer_from_user
  - transfer_from_key
  - transfer_from_host
  - processing_api_service_url
  - processing_api_access_key
  - processing_api_analysis_tasks_url
  - processing_api_analysis_update_status_url
  - result_settings
  - mail_settings

vars:
  - experiment_name: null
  - experiment_name_result: null
  - workpackage: null
  - fastq_storage_folder: null
  - method: null
  - result_storage_folder: null
  - run_year: null
  - samplesheet_storage_folder: null
  - stderr: null

tasks:
  get_experiment_name:
    action: core.local
    input:
      cmd: python3 -c "import sys; sys.stdout.write(\"<% ctx(runfolder) %>\".split('/')[-1])"
    next:
      - when: <% succeeded() %>
        publish: experiment_name=<% result().stdout %>
        do:
          - get_method
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: 'get_experiment_name  -- Could not get experiment name'
        do:
          - bioinfo_error_notifier
          - error_notifier
          - mark_as_failed

  get_method:
    action: core.local
    input:
      cmd: python3 -c "import re; print(re.search(r'.+/wp[0-9i]+_([A-Za-z0-9-]+)', '<% ctx(runfolder) %>').groups()[0])"
    next:
      - when: <% succeeded() %>
        publish: method=<% result().stdout %>
        do:
          - get_workpackage
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: 'get_method  -- Could not extract method'
        do:
          - bioinfo_error_notifier
          - error_notifier
          - mark_as_failed

  get_workpackage:
    action: core.local
    input:
      cmd: python3 -c "import re; print(re.search(r'.+/(wp[0-9i])+_[A-Za-z0-9]+', '<% ctx(runfolder) %>').groups()[0])"
    next:
      - when: <% succeeded() %>
        publish: workpackage=<% result().stdout %>
        do:
          - get_experiment_name_result
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: 'get_method  -- Could not extract method'
        do:
          - bioinfo_error_notifier
          - error_notifier
          - mark_as_failed

  # GMS560 can sometimes divide RNA and DNA experiments on multiple sequence runs
  # which they want to be saved in the same result folder. This experiments will
  # end with '-DNA' or '-RNA'.
  get_experiment_name_result:
    action: core.local
    input:
      cmd: python3 -c "import sys; import re; sys.stdout.write(re.sub(r'-[RD]NA$', '', '<% ctx(experiment_name) %>'))"
    next:
      - when: <% succeeded() %>
        publish: experiment_name_result=<% result().stdout %>
        do:
          - get_run_year
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: 'get_experiment_name_result  -- Could not get experiment name for result'
        do:
          - bioinfo_error_notifier
          - error_notifier
          - mark_as_failed

  get_run_year:
    action: core.local
    input:
      cmd: "curl -H 'Authorization: Api-Key <% ctx(processing_api_access_key) %>' <% ctx(processing_api_service_url) %><% ctx(processing_api_analysis_tasks_url) %>?analysis_name=<% ctx(experiment_name) %> | python3 -c 'import json; import sys; sys.stdout.write(json.dumps(json.load(sys.stdin)[0][\"created_date\"].split(\"-\")[0]))'"
    next:
      - when: <% succeeded() %>
        publish: run_year=<% result().stdout %>
        do:
          - mark_as_started
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: "get_run_year  -- Couldn't fetch created date from processing api for <% ctx(experiment_name) %>"
        do:
          - bioinfo_error_notifier
          - error_notifier
          - mark_as_failed

  mark_as_started:
    action: core.http
    input:
      url: http://<% ctx(transfer_from_host) %>:<% ctx(runfolder_port) %>/api/<% ctx(runfolder_api_version) %>/runfolders/path<% ctx(runfolder) %>
      body: '{"state": "started"}'
      method: "POST"
    next:
      - when: <% succeeded() %>
        do:
          - create_year_folder
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: "mark_as_started -- Couldn't mark <% ctx(runfolder) %> as started!"
        do:
          - bioinfo_error_notifier
          - error_notifier

  create_year_folder:
    action: core.local
    input:
      cmd: mkdir -p <% ctx(result_settings).get(ctx(workpackage)).get(ctx(method)).get('result_location') %>/<% ctx(run_year) %>
    next:
      - when: <% succeeded() %>
        publish: 
          - result_storage_folder: <% ctx(result_settings).get(ctx(workpackage)).get(ctx(method)).get('result_location') %>/<% ctx(run_year) %>
        do:
          - transfer_result
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: 'create_year_folder  -- Could not create folder <% ctx(result_settings).get(ctx(workpackage)).get(ctx(method)).get("result_location") %>/<% ctx(run_year) %>'
        do:
          - bioinfo_error_notifier
          - error_notifier
          - mark_as_failed

  transfer_result:
    action: core.local
    input:
      timeout: 86400
      cmd: rsync.py -c -f <% ctx(runfolder) %>/ -t <% ctx(result_storage_folder) %>/<% ctx(experiment_name_result) %> -u <% ctx(transfer_from_user) %> -i <% ctx(transfer_from_key) %> -r <% ctx(transfer_from_host) %> -p 1
    retry:
      delay: 10
      count: 5
    next:
      - when: <% succeeded() %>
        do:
          - mark_as_finished
          - result_retrieved
      - when: <% succeeded() and ctx(result_settings).get(ctx(workpackage)).get(ctx(method)).get("move_qc")  %>
        do:
          - create_qc_year_folder
      - when: <% failed() %>
        publish:
          - stderr: "The transfer of fastq files from compute to hospital failed."
          - failed_step: 'transfer_result  -- Could not fetch result from <% ctx(transfer_from_host) %>\:<% ctx(runfolder) %>, <% result() %>'
        do:
          - bioinfo_error_notifier
          - error_notifier
          - mark_as_failed

  # KG wants to gather qc in a common batchQC folder
  create_qc_year_folder:
    action: core.local
    input:
      cmd: mkdir -p <% ctx(result_settings).get(ctx(workpackage)).get(ctx(method)).get('qc_location') %>/<% ctx(run_year) %>
    next:
      - when: <% succeeded() %>
        publish: 
          - result_qc_storage_folder: <% ctx(result_settings).get(ctx(workpackage)).get(ctx(method)).get('qc_location') %>/<% ctx(run_year) %>
        do:
          - mv_multiqc
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: 'create_qc_year_folder -- Could not create year folder <% ctx(result_settings).get(ctx(workpackage)).get(ctx(method)).get("qc_location") %>/<% ctx(run_year) %>'
        do:
          - bioinfo_error_notifier
          - mark_as_failed
          - error_notifier

  mv_multiqc:
    action: core.local
    input:
      cwd: <% ctx(result_storage_folder) %>/<% ctx(experiment_name) %>
      cmd: bash -c 'for filename in $(ls multiqc_*.html); do mv $filename <% ctx(result_qc_storage_folder) %>/<% ctx(experiment_name) %>_${filename:$(expr match $filename multiqc_):-5}_multiqc.html ; done'
    next:
      - when: <% failed() %>
        publish:
          - stderr: <% result() %>
          - failed_step: 'mv_multiqc  -- Could not move multiqc_*.html to  <% ctx(result_qc_storage_folder) %>'
        do:
          - bioinfo_error_notifier
          - mark_as_failed
          - error_notifier

  error_notifier:
    action: core.sendmail
    input:
      to: <% ctx(mail_settings).get('lab').get(ctx(workpackage)) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][<% ctx(workpackage) %>][<% ctx(method) %>][ERROR] - Retrieve failure, <% ctx(experiment_name) %>"
      body: "Something went wrong when retrieving result for <% ctx(experiment_name) %>. A Bioinformatician has been notified."
    next:
      - when: <% succeeded() %>
        do:
          - update_processing_status_failed

  update_processing_status_failed:
    action: core.local
    input:
      cmd: "status=$(curl -o /dev/null -s --write-out '%{http_code}' -d  '{\"analysis_status\": \"FA\"}' -H 'Content-Type: application/json' -H 'Authorization: Api-Key <% ctx(processing_api_access_key) %>' -X PUT <% ctx(processing_api_service_url) %><% ctx(processing_api_analysis_update_status_url) %><% ctx(experiment_name) %>/); if [ $status != '202' ]; then echo $status; exit 1; fi"
    next:
      - when: <% succeeded() %>
        do:
          - fail

  bioinfo_error_notifier:
    action: core.sendmail
    input:
      to: <% ctx(mail_settings).get('bioinfo') %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][<% ctx(workpackage) %>][<% ctx(method) %>][ERROR] - Retrieve, <% ctx(experiment_name) %>"
      body: Something went wrong during the retrieval of <% ctx(experiment_name) %>, please investigate!!!\n Failure message -- <% failed_step  %>, <% ctx(stderr) %> Workflow execution id - <% ctx().st2.action_execution_id %> Host - Hospital
    next:
      - when: <% succeeded() %>
        do:
          - fail

  mark_as_finished:
    action: core.http
    input:
      url: http://<% ctx(transfer_from_host) %>:<% ctx(runfolder_port) %>/api/<% ctx(runfolder_api_version) %>/runfolders/path<% ctx(runfolder) %>
      body: '{"state": "done"}'
      method: "POST"
    next:
      - when: <% succeeded() %>
        do:
          - update_processing_status_delivered

  update_processing_status_delivered:
    action: core.local
    input:
      cmd: "status=$(curl -o /dev/null -s --write-out '%{http_code}' -d  '{\"analysis_status\": \"DD\"}' -H 'Content-Type: application/json' -H 'Authorization: Api-Key <% ctx(processing_api_access_key) %>' -X PUT <% ctx(processing_api_service_url) %><% ctx(processing_api_analysis_update_status_url) %><% ctx(experiment_name) %>/); if [ $status != '202' ]; then echo $status; exit 1; fi"

  mark_as_failed:
    action: core.http
    input:
      url:  http://<% ctx(transfer_from_host) %>:<% ctx(runfolder_port) %>/api/<% ctx(runfolder_api_version) %>/runfolders/path<% ctx(runfolder) %>
      body: '{"state": "error"}'
      method: "POST"
    next:
      - when: <% supposed %>
        do:
          - fail

  result_retrieved:
    action: core.sendmail
    input:
      to: <% ctx(mail_settings).get('lab').get(ctx(workpackage)) %>
      from: stanley@clinicalgenomics-as.se
      subject: "[DUCTUS][<% ctx(workpackage) %>][<% ctx(method) %>][SUCCESS] - Analysis available, <% ctx(experiment_name) %>"
      body: The result from analysis of <% ctx(experiment_name) %> can now be accessed. Workflow execution id - <% ctx().st2.action_execution_id %> Host - Hospital

output:
  - stderr: "<% ctx(stderr) %>"
